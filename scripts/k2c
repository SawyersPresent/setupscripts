#!/usr/bin/env python3
# -*- coding:utf-8 -*-

# https://github.com/fortra/impacket/blob/master/examples/ticketConverter.py
# https://github.com/fortra/impacket/blob/master/examples/describeTicket.py

import argparse
import struct
import base64

from impacket import version
from impacket.krb5.ccache import CCache
from impacket.krb5 import constants

def is_ccache( data: bytes ) -> bool:
    fd = struct.unpack( ">B" , data[0:1] )[0]
    return fd == 0x5

def is_kirbi( data: bytes ) -> bool:
    fd = struct.unpack( ">B" , data[0:1] )[0]
    return fd == 0x76

def main():
    print(version.BANNER)

    parser = argparse.ArgumentParser(add_help=True, description="convert between your favorite ticket formats, usage: https://i.gyazo.com/12b8a68068d24ec87b1221a047c2b4c4.png")
    parser.add_argument(
        "--input", "-i", 
        action="store", 
        help="Input file", 
        required=False
    )

    Raw      = ""
    Filetype = ""

    args = parser.parse_args()
    if args.input is None:
        Raw = input().strip().encode()
    else:
        with open( args.input, 'rb' ) as f:
            Raw = f.read().strip()

    if Raw.startswith( b"doI" ):
        Filetype = "b64kirbi"
    
    if is_ccache( Raw ):
        Filetype = "ccache"

    if is_kirbi( Raw ):
        Filetype = "kirbi"

    
    match Filetype:
        case "ccache":
            ccache = CCache.loadFile( args.input )
            kirbi  = ccache.toKRBCRED()
            print( base64.b64encode( kirbi ).decode() )
        
        case _:
            assert Filetype == "kirbi" or Filetype == "b64kirbi", "unknown ticket type"
            
            ccache = CCache()
            if Filetype == "kirbi":
                ccache.fromKRBCRED( Raw )
            elif Filetype == "b64kirbi":
                kirbi = base64.b64decode( Raw )
                ccache.fromKRBCRED( kirbi )

            if len( ccache.credentials ) > 1:
                print( f"more than one credential found, returning first one" )

            principal = ccache.credentials[ 0 ][ 'client' ].prettyPrint().split( b'@' )[ 0 ].decode( 'utf-8' )
            spn       = ccache.credentials[ 0 ][ 'server' ].prettyPrint().split( b'@' )[ 0 ].decode( 'utf-8' )
            flags     = []
            for k in constants.TicketFlags:
                if ((ccache.credentials[0]['tktflags'] >> (31 - k.value)) & 1) == 1:
                    flags.append(constants.TicketFlags(k.value).name)
            
            print( f"[*] {principal} -> {spn} [ {', '.join(flags)} ]" )
            with open( f"{ principal }@{ spn.replace( '/', '_' )     }.ccache", 'wb' ) as f:
                f.write( ccache.getData() )
            print( f"[+] export KRB5CCNAME='{ principal }@{ spn.replace( '/', '_' )     }.ccache' && nxc smb ... --use-kcache" )

if __name__ == '__main__':
    main()