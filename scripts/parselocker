#!/usr/bin/env python3
import xmltodict
import sys
from charset_normalizer import from_path
from colorama import Fore, Style, init

init(autoreset=True)


def app_parse(file_path: str):
    result = from_path(file_path).best()
    xml_string = str(result)
    data = xmltodict.parse(xml_string)
    policy = data.get("AppLockerPolicy", {})
    rule_collections = policy.get("RuleCollection", [])
    if isinstance(rule_collections, dict):
        rule_collections = [rule_collections]
    all_rules = []
    for collection in rule_collections:
        collection_type = collection.get("@Type", "Unknown")
        enforcement_mode = collection.get("@EnforcementMode", "Unknown")
        rules = []

        file_publisher_rules = collection.get("FilePublisherRule", [])
        if isinstance(file_publisher_rules, dict):
            file_publisher_rules = [file_publisher_rules]

        for rule in file_publisher_rules:
            rules.append({
                "Type": "FilePublisherRule",
                "Id": rule.get("@Id"),
                "Name": rule.get("@Name"),
                "Description": rule.get("@Description"),
                "UserOrGroupSid": rule.get("@UserOrGroupSid"),
                "Action": rule.get("@Action"),
                "Conditions": rule.get("Conditions", {})
            })

        file_path_rules = collection.get("FilePathRule", [])
        if isinstance(file_path_rules, dict):
            file_path_rules = [file_path_rules]

        for rule in file_path_rules:
            rules.append({
                "Type":
                "FilePathRule",
                "Id":
                rule.get("@Id"),
                "Name":
                rule.get("@Name"),
                "Description":
                rule.get("@Description"),
                "UserOrGroupSid":
                rule.get("@UserOrGroupSid"),
                "Action":
                rule.get("@Action"),
                "Path":
                rule.get("Conditions", {}).get("FilePathCondition",
                                               {}).get("@Path", "")
            })

        all_rules.extend(rules)

    return all_rules


def print_rules(rules: list, special: str = None):
    if not special:
        for rule in rules:
            print("\n=== Rule Information ===")
            id = rule.get("Id")
            if id:
                print(f"ID: {id}")
            sid = rule.get("UserOrGroupSid")
            print(f"Action: {rule.get('Action')}")
            if rule["Type"] == "FilePathRule":
                print(f"Path: {rule.get('Path')}")
            elif rule["Type"] == "FilePublisherRule":
                conditions = rule.get("Conditions", {})
                if conditions:
                    print("Conditions:")
                    for key, value in conditions.items():
                        print(f"  {key}: {value}")
            print("=" * 30)
    else:
        match special:
            case "everyone":
                print(f"==== Only printing rules that apply to EVERYONE ==== ")
                for rule in rules:
                    if rule.get("UserOrGroupSid") == "S-1-1-0":
                        print("\n=== Rule Information ===")
                        id = rule.get("Id")
                        if id:
                            print(f"ID: {id}")
                        sid = rule.get("UserOrGroupSid")
                        print(f"Action: {rule.get('Action')}")
                        if rule["Type"] == "FilePathRule":
                            print(f"Path: {rule.get('Path')}")
                        elif rule["Type"] == "FilePublisherRule":
                            conditions = rule.get("Conditions", {})
                            if conditions:
                                print("Conditions:")
                                for key, value in conditions.items():
                                    print(f"  {key}: {value}")
                        print("=" * 30)
            case "desc":
                print("only printing rules with descriptions and corresponding SIDs")
                for rule in rules:
                    if (rule.get("Description")):
                        print("\n=== Rule Information ===")
                        print(f"SID: {rule.get('UserOrGroupSid')}")
                        print(f"Description: {rule.get('Description')}")
                        print("=" * 30)
            case _:
                for rule in rules:
                    if rule.get("UserOrGroupSid") == special:
                        print("\n=== Rule Information ===")
                        id = rule.get("Id")
                        if id:
                            print(f"ID: {id}")
                        sid = rule.get("UserOrGroupSid")
                        print(f"Action: {rule.get('Action')}")
                        if rule["Type"] == "FilePathRule":
                            print(f"Path: {rule.get('Path')}")
                        elif rule["Type"] == "FilePublisherRule":
                            conditions = rule.get("Conditions", {})
                            if conditions:
                                print("Conditions:")
                                for key, value in conditions.items():
                                    print(f"  {key}: {value}")
                        print("=" * 30)


if __name__ == "__main__":
    assert len(
        sys.argv
    ) > 1, "Usage: python parselocker.py <file_path> </optional: everyone/[sid]/desc>"
    assert sys.argv[1].endswith(
        ".xml"), "File must be an XML file (e.g Applocker.xml)"

    if len(sys.argv) == 3:
        assert sys.argv[2] in ["everyone", "desc"
                               ] or "-" in sys.argv[2], "Invalid argument"
    file_path = sys.argv[1]
    special = sys.argv[2] if len(sys.argv) == 3 else None
    parsed_rules = app_parse(file_path)
    print_rules(parsed_rules, special)
