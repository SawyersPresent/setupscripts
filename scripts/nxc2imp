#!/usr/bin/env python3
# filepath: nxc2imp

import os
import sys
import readline

DEBUG = False
SUFFIX = 'psexec.py'

if DEBUG:
    def PRINT(*args):
        print(*args)
else:
    def PRINT(*args):
        pass

def show_help():
    print("nxc2imp - Convert NetExec commands to Impacket psexec.py format")
    print()
    print("Usage:")
    print("  echo 'nxc_command' | nxc2imp")
    print("  nxc2imp --help")
    print()
    print("Examples:")
    print("  echo 'nxc smb dc.test.local -u admin -p Pass123' | nxc2imp")
    print("  echo 'nxc smb dc.test.local -u admin -H abc123...' | nxc2imp")
    print()
    print("Output:")
    print("  psexec.py 'test.local'/'admin':'Pass123'@dc.test.local")
    print("  psexec.py 'test.local'/'admin'@dc.test.local -hashes ':abc123...'")

def is_nxc_command(raw: str) -> bool:
    """Check if input looks like a valid nxc command"""
    if not raw.strip():
        return False
    return (raw.strip().startswith('nxc ') and 
            '-u' in raw and 
            ('-p' in raw or '-H' in raw))

def get_username(raw: str) -> str:
    return raw.split('-u')[1].split('-')[0].strip().replace('"', '').replace("'", '')

def get_password(raw: str) -> str:
    return raw.split('-p')[1].strip().replace('"', '').replace("'", '')

def get_domain(raw: str) -> str:
    return ".".join(raw.split(" ")[2].split(".")[1:])

def get_computer(raw: str) -> str:
    return raw.split(" ")[2]

def get_hash(raw: str) -> str:
    return raw.split('-H')[1].strip().replace('"', '').replace("'", '')

def is_ip(raw: str) -> bool:
    import re
    return bool(re.match(r'^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$', raw))

class BaseCmd:
    def __init__(self, raw):
        self.username = get_username(raw)
        self.domain = get_domain(raw)
        self.computer = get_computer(raw)

class PwCmd(BaseCmd):
    def __init__(self, raw):
        super().__init__(raw)
        self.password = get_password(raw)

class HashCmd(BaseCmd):
    def __init__(self, raw):
        super().__init__(raw)
        self.hash = get_hash(raw)

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        show_help()
        sys.exit(0)
    
    try:
        raw = input()
        
        if not is_nxc_command(raw):
            show_help()
            sys.exit(0)
        
        if is_ip(raw.split(" ")[2]):
            print("Warning: Using IP address instead of FQDN")
        
        if '-p' in raw:
            cmd = PwCmd(raw)
            print(f"=> {SUFFIX} '{cmd.domain}'/'{cmd.username}':'{cmd.password}'@{cmd.computer}")
        elif '-H' in raw:
            cmd = HashCmd(raw)
            print(f"=> {SUFFIX} '{cmd.domain}'/'{cmd.username}'@{cmd.computer} -hashes ':{cmd.hash}'")
            
    except (EOFError, KeyboardInterrupt):
        show_help()
    except Exception:
        show_help()
